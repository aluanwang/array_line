#N canvas 117 22 958 614 10;
#X msg 17 275 bang;
#N canvas 0 22 450 278 (subpatch) 0;
#X array target 100 float 2;
#X coords 0 1 100 -1 200 140 1;
#X restore 17 356 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array source 100 float 2;
#X coords 0 1 100 -1 200 140 1;
#X restore 17 95 graph;
#X obj 17 322 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 17 17 cnv 15 400 30 empty empty empty 20 12 0 14 -192016 -66577
0;
#X text 24 22 array_line:;
#X text 95 23 abstraction to set new values in an array a la line;
#X text 16 65 1 draw some values to the "source" array with the mouse
;
#X text 15 245 2 bang the abstraction and set these values to the "target"
array in a [line] fashion;
#X text 34 321 finished;
#X text 488 37 1st: target array name;
#X text 489 56 2nd: source array name;
#X text 489 74 3rd: ramp time in milliseconds;
#X text 490 92 4th: step size in cents;
#X text 445 129 Inlets:;
#X text 488 146 1st: bang to start the process;
#X text 488 162 2nd: target array name (symbol);
#X text 487 178 3rd: source array name (symbol);
#X text 451 244 Outlet: bang when finished;
#X msg 581 452 bang;
#N canvas 0 22 450 278 (subpatch) 0;
#X array another_target 20 float 2;
#X coords 0 1 20 -1 120 90 1 0 0;
#X restore 802 451 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array another_source 20 float 2;
#X coords 0 1 20 -1 120 90 1 0 0;
#X restore 456 451 graph;
#X obj 581 539 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 581 516 array_line target source 800 10;
#X symbolatom 626 454 14 0 0 0 - - -, f 14;
#X symbolatom 672 474 14 0 0 0 - - -, f 14;
#X floatatom 718 496 5 0 0 0 - - -, f 5;
#X floatatom 764 497 5 0 0 0 - - -, f 5;
#X text 454 416 use the inlets to change settings;
#N canvas 145 55 544 396 duration_sync_test 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array dur_sync_target 100 float 2;
#X coords 0 1 100 -1 120 90 1 0 0;
#X restore 160 151 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array dur_sync_source 100 float 2;
#X coords 0 1 100 -1 120 90 1 0 0;
#X restore 26 151 graph;
#X msg 26 246 bang;
#X obj 26 268 t b b;
#X obj 53 290 array_line dur_sync_target dur_sync_source 800 10;
#X obj 26 322 timer;
#X floatatom 26 344 5 0 0 0 - - -, f 5;
#X text 25 26 this subpatch demonstrates the latency created in the
abstraction. the third argument (800) is supposed to be the ramp time
\, but [timer] below outputs larger numbers than this (and not the
same \, every time). don't really know how to calculate that latency
(yet) \, so if you want to improve this \, please do (and let me know
:);
#X connect 2 0 3 0;
#X connect 3 0 5 0;
#X connect 3 1 4 0;
#X connect 4 0 5 1;
#X connect 5 0 6 0;
#X restore 792 574 pd duration_sync_test;
#X text 533 574 check this ramp time sync test subpatch ->;
#X text 21 566 made by Alexandros Drymonitis;
#X text 17 502 the very first time has a bit of a clumsy movement (at
least on my computer). try more than once to see the ramp move more
"elegantly";
#X text 434 18 Arguments*:;
#X obj 17 299 array_line target source;
#X text 487 194 4th: ramp time in milliseconds (float)**;
#X text 486 211 5th: step size in cents (float)***;
#X text 454 333 ** not very precise. check the subpatch below for info
;
#X text 454 351 *** with a 100 element size array \, the lowest step
size (in cents) that seems to work is 8 \, with a 20 element array
(below) lowest step is sometimes 8 \, sometimes 7...you'll have to
experiment;
#X text 454 277 * symbol arguments are necessary \, no default symbol.
float arguments can be omitted \, default values are 0 . you don't
need to specify the array size \, but both arrays need to have the
same size;
#X connect 0 0 34 0;
#X connect 19 0 23 0;
#X connect 23 0 22 0;
#X connect 24 0 23 1;
#X connect 25 0 23 2;
#X connect 26 0 23 3;
#X connect 27 0 23 4;
#X connect 34 0 3 0;
